project_dir = 'android'

def get_play_store_params(options)
  play_store_params = {
    track: options[:is_next_release] ? 'internal' : 'production',
  }
end

platform :android do
  lane :clean do
    gradle(task: 'clean', project_dir: project_dir)
  end

  private_lane :get_latest_version_code do |options|
    google_play_track_version_codes(get_play_store_params(options)).first
  end

  private_lane :decode_keystore_to_file do
    ENV['UPLOAD_KEYSTORE_PATH'] = "#{Dir.pwd}/../github-actions.keystore"

    base64_to_file(ENV['UPLOAD_KEYSTORE_FILE'], ENV['UPLOAD_KEYSTORE_PATH'])

    UI.message("Decoded upload keystore to #{ENV['UPLOAD_KEYSTORE_PATH']}")
  end

  lane :build do |options|
    version = get_version
    code = (options[:is_release] ? get_latest_version_code(options) : 0) + 1

    decode_keystore_to_file if (ENV['UPLOAD_KEYSTORE_FILE'])

    gradle(
      task: 'bundle',
      build_type: options[:is_release] ? 'Release' : 'Debug',
      project_dir: project_dir,
      properties: {
        'applicationId' =>
          CredentialsManager::AppfileConfig.try_fetch_value(:package_name),
        'version.name' => version,
        'version.code' => code,
        'keystore.path' => ENV['UPLOAD_KEYSTORE_PATH'],
        'keystore.password' => ENV['UPLOAD_KEYSTORE_PASSWORD'],
        'keystore.key.alias' => ENV['UPLOAD_KEYSTORE_KEY_ALIAS'],
        'keystore.key.password' => ENV['UPLOAD_KEYSTORE_KEY_PASSWORD'],
      },
    )
  end

  lane :prepare_release do |options|
    android_appicon(
      appicon_path: "#{project_dir}/app/res/mipmap",
      appicon_icon_types: %i[launcher notification splash_land splash_port],
      generate_rounded: true,
    )

    if options[:is_next_release]
      add_badge(glob: "/#{project_dir}/app/res/mipmap-*/ic_launcher*.png")
    end
  end

  lane :release do |options|
    upload_to_play_store(
      release_status: 'draft',
      aab: "#{project_dir}/app/build/outputs/bundle/release/app-release.aab",
      **get_play_store_params(options),
    )
  end
end
