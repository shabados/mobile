project_dir = 'ios'
project_scheme = 'Mobile'
project_workspace = "./#{project_dir}/#{project_scheme}.xcworkspace"
project_location = "./#{project_dir}/#{project_scheme}.xcodeproj"

platform :ios do
  lane :clean do
    xcodebuild(
      workspace: project_workspace,
      scheme: project_scheme,
      xcargs: 'clean',
    )
    cocoapods(clean_install: true, podfile: "./#{project_dir}/Podfile")
  end

  lane :build do |options|
    should_skip_release_options = options[:is_release] ? false : true

    build_app(
      workspace: project_workspace,
      scheme: project_scheme,
      skip_package_ipa: should_skip_release_options,
      skip_archive: should_skip_release_options,
      skip_codesigning: should_skip_release_options,
      silent: true,
    )
  end

  private_lane :setup_api_key do
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_KEY'],
    )
  end

  lane :sync_certificates do
    setup_ci
    setup_api_key

    sync_code_signing(type: 'appstore', readonly: false)
  end

  lane :sync_version do
    version = get_version

    increment_version_number(
      version_number: version,
      xcodeproj: project_location,
    )

    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: project_location,
    )
  end

  lane :prepare_release do |options|
    setup_ci
    setup_api_key

    appicon(
      appicon_path: "./#{project_dir}/#{project_scheme}/Images.xcassets",
      appicon_devices: %i[ipad iphone ios_marketing watch watch_marketing],
    )
    add_badge if options[:is_next_release]

    sync_version
    sync_code_signing(type: 'appstore', readonly: true)
  end

  lane :release do |options|
    setup_ci
    setup_api_key

    upload_to_testflight if options[:is_next_release]
  end
end
